{"version":3,"sources":["TodoItem.js","TodoList.js","App.js","index.js"],"names":["TodoItem","key","this","props","todo","id","className","classNames","completed","type","onChange","checked","htmlFor","title","onClick","deleteItem","React","PureComponent","TodoList","todos","map","todoItem","App","state","todoList","newTodoId","clearCompleted","setState","filter","makeCompletedAll","every","makeCompleted","detectUncompletedItems","el","length","addTitle","event","target","value","resetState","addNewTodo","preventDefault","trim","onSubmit","placeholder","href","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.40ec5059.chunk.js","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\n\nclass TodoItem extends React.PureComponent {\n  render() {\n    return (\n      <li\n        key={this.props.todo.id}\n        className={classNames({ completed: this.props.todo.completed })}\n      >\n        <div className=\"view\">\n          <input\n            type=\"checkbox\"\n            className=\"toggle\"\n            id={this.props.todo.id}\n            onChange={() => this.props.completed(this.props.todo.id)}\n            checked={this.props.todo.completed}\n          />\n          <label\n            htmlFor={this.props.todo.id}\n          >\n            {this.props.todo.title}\n          </label>\n          <button\n            type=\"button\"\n            id={this.props.todo.id}\n            className=\"destroy\"\n            onClick={() => this.props.deleteItem(this.props.todo.id)}\n          />\n        </div>\n        <input type=\"text\" className=\"edit\" />\n      </li>\n    );\n  }\n}\n\nexport default TodoItem;\n\nTodoItem.propTypes = {\n  deleteItem: PropTypes.func.isRequired,\n  completed: PropTypes.func.isRequired,\n  todo: PropTypes.shape({\n    id: PropTypes.number,\n    title: PropTypes.string,\n    completed: PropTypes.bool,\n    edited: PropTypes.bool,\n  }).isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport TodoItem from './TodoItem';\n\nclass TodoList extends React.PureComponent {\n  render() {\n    return (\n      <ul className=\"todo-list\">\n        {this.props.todos.map(todoItem => (\n          <TodoItem\n            todo={todoItem}\n            completed={this.props.completed}\n            deleteItem={this.props.deleteItem}\n          />\n        ))}\n      </ul>\n    );\n  }\n}\n\nexport default TodoList;\n\nTodoList.propTypes = {\n  deleteItem: PropTypes.func.isRequired,\n  completed: PropTypes.bool.isRequired,\n  todos: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number,\n    title: PropTypes.string,\n    completed: PropTypes.bool,\n  })).isRequired,\n};\n","import React from 'react';\nimport TodoList from './TodoList';\n\nclass App extends React.PureComponent {\n  state = {\n    todoList: [],\n    newTodoId: 0,\n    completed: false,\n    title: '',\n  }\n\n  clearCompleted = () => {\n    this.setState(state => ({\n      todoList: state.todoList.filter(todo => todo.completed !== true),\n    }));\n  }\n\n  makeCompletedAll = () => {\n    if (this.state.todoList.every(todo => todo.completed === true)) {\n      this.setState(state => ({\n        todoList: state.todoList.map(todo => (\n          {\n            ...todo,\n            completed: false,\n          }\n        )),\n      }));\n    } else {\n      this.setState(state => ({\n        todoList: state.todoList.map(todo => (\n          {\n            ...todo,\n            completed: true,\n          }\n        )),\n      }));\n    }\n  }\n\n  makeCompleted = (id) => {\n    this.setState(state => ({\n      todoList: state.todoList.map((todo) => {\n        if (todo.id === id) {\n          return {\n            ...todo,\n            completed: !todo.completed,\n          };\n        }\n\n        return todo;\n      }),\n    }));\n  }\n\n  detectUncompletedItems = () => (\n    this.state.todoList.filter(el => el.completed === false).length\n  )\n\n  deleteItem = (id) => {\n    this.setState(state => ({\n      todoList: state.todoList.filter(todo => todo.id !== id),\n    }));\n  }\n\n  addTitle = (event) => {\n    this.setState({ title: event.target.value });\n  }\n\n  resetState = () => {\n    this.setState(state => ({\n      title: '',\n      newTodoId: state.newTodoId + 1,\n    }));\n  }\n\n  addNewTodo = (event) => {\n    event.preventDefault();\n    this.state.title.trim() && this.setState(state => ({\n      todoList: [\n        ...state.todoList,\n        {\n          title: state.title,\n          id: state.newTodoId + 1,\n          completed: state.completed,\n        },\n      ],\n    }));\n    this.resetState();\n  }\n\n  render() {\n    return (\n      <section className=\"todoapp\">\n        <header className=\"header\">\n          <h1>todos</h1>\n          <form onSubmit={this.addNewTodo}>\n            <input\n              value={this.state.title}\n              onChange={this.addTitle}\n              className=\"new-todo\"\n              placeholder=\"What needs to be done?\"\n            />\n          </form>\n        </header>\n        <section className=\"main\">\n          <input\n            type=\"checkbox\"\n            id=\"toggle-all\"\n            className=\"toggle-all\"\n            onChange={this.makeCompletedAll}\n          />\n          <label htmlFor=\"toggle-all\">Mark all as complete</label>\n          <TodoList\n            todos={this.state.todoList}\n            completed={this.makeCompleted}\n            deleteItem={this.deleteItem}\n          />\n          {this.state.todoList.length > 0 && (\n            <footer className=\"footer\">\n              <span className=\"todo-count\">\n                {this.detectUncompletedItems()}\n                {' '}\n                items left\n              </span>\n              <ul className=\"filters\">\n                <li>\n                  <a href=\"#/\" className=\"selected\">All</a>\n                </li>\n                <li><a href=\"#/active\">Active</a></li>\n                <li><a href=\"#/completed\">Completed</a></li>\n              </ul>\n              <button\n                type=\"button\"\n                className=\"clear-completed\"\n                onClick={this.clearCompleted}\n              >\n                Clear completed\n              </button>\n            </footer>\n          )}\n        </section>\n      </section>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './base.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}