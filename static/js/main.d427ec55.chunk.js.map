{"version":3,"sources":["TodoItem.js","TodoList.js","Footer.js","App.js","index.js"],"names":["TodoItem","this","props","todo","completed","deleteItem","className","classNames","type","id","onChange","checked","htmlFor","title","onClick","React","PureComponent","TodoList","todos","map","todoItem","key","Footer","uncompleted","setViewMode","selectedView","clearCompleted","href","todoLocalStorage","JSON","parse","localStorage","getItem","App","state","todoList","newTodoId","length","setState","filter","makeCompletedAll","every","makeCompleted","detectUncompletedItems","el","addTitle","event","target","value","resetState","addNewTodo","preventDefault","selectActiveView","setItem","stringify","onSubmit","placeholder","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d427ec55.chunk.js","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\n\nclass TodoItem extends React.PureComponent {\n  render() {\n    const { todo, completed, deleteItem } = this.props;\n\n    return (\n      <li\n        className={classNames({ completed: todo.completed })}\n      >\n        <div className=\"view\">\n          <input\n            type=\"checkbox\"\n            className=\"toggle\"\n            id={todo.id}\n            onChange={() => completed(todo.id)}\n            checked={todo.completed}\n          />\n          <label\n            htmlFor={todo.id}\n          >\n            {todo.title}\n          </label>\n          <button\n            type=\"button\"\n            id={todo.id}\n            className=\"destroy\"\n            onClick={() => deleteItem(todo.id)}\n          />\n        </div>\n        <input type=\"text\" className=\"edit\" />\n      </li>\n    );\n  }\n}\n\nexport default TodoItem;\n\nTodoItem.propTypes = {\n  deleteItem: PropTypes.func.isRequired,\n  completed: PropTypes.func.isRequired,\n  todo: PropTypes.shape({\n    id: PropTypes.number,\n    title: PropTypes.string,\n    completed: PropTypes.bool,\n    edited: PropTypes.bool,\n  }).isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport TodoItem from './TodoItem';\n\nconst TodoList = props => (\n  <ul className=\"todo-list\">\n    {props.todos.map(todoItem => (\n      <TodoItem\n        todo={todoItem}\n        completed={props.completed}\n        deleteItem={props.deleteItem}\n        key={todoItem.id}\n      />\n    ))}\n  </ul>\n);\n\nexport default TodoList;\n\nTodoList.propTypes = {\n  deleteItem: PropTypes.func.isRequired,\n  completed: PropTypes.func.isRequired,\n  todos: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number,\n    title: PropTypes.string,\n    completed: PropTypes.bool,\n  })).isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport className from 'classnames';\n\nclass Footer extends React.PureComponent {\n  render() {\n    const {\n      uncompleted,\n      setViewMode,\n      selectedView,\n      clearCompleted,\n    } = this.props;\n\n    return (\n      <footer className=\"footer\">\n        <span className=\"todo-count\">\n          {uncompleted()}\n          {' '}\n          items left\n        </span>\n        <ul className=\"filters\">\n          <li>\n            <a\n              href=\"#/\"\n              id=\"all\"\n              onClick={setViewMode}\n              className={className(selectedView === 'All'\n                ? 'selected'\n                : '')}\n            >\n              All\n            </a>\n          </li>\n          <li>\n            <a\n              href=\"#/active\"\n              id=\"active\"\n              onClick={setViewMode}\n              className={className(selectedView === 'Active'\n                ? 'selected'\n                : '')}\n            >\n              Active\n            </a>\n          </li>\n          <li>\n            <a\n              href=\"#/completed\"\n              id=\"completed\"\n              onClick={setViewMode}\n              className={selectedView === 'Completed'\n                ? 'selected'\n                : ''}\n            >\n              Completed\n            </a>\n          </li>\n        </ul>\n        <button\n          type=\"button\"\n          className=\"clear-completed\"\n          onClick={clearCompleted}\n        >\n          Clear completed\n        </button>\n      </footer>\n    );\n  }\n}\n\nexport default Footer;\n\nFooter.propTypes = {\n  uncompleted: PropTypes.func.isRequired,\n  setViewMode: PropTypes.func.isRequired,\n  selectedView: PropTypes.string.isRequired,\n  clearCompleted: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport TodoList from './TodoList';\nimport Footer from './Footer';\n\nconst todoLocalStorage = JSON.parse(localStorage.getItem('todoList')) || [];\n\nclass App extends React.PureComponent {\n  state = {\n    todoList: [],\n    newTodoId: todoLocalStorage.length,\n    completed: false,\n    title: '',\n    selectedView: 'All',\n  }\n\n  componentDidMount() {\n    this.setState({ todoList: [...todoLocalStorage] });\n  }\n\n  componentDidUpdate() {\n    localStorage.setItem('todoList', JSON.stringify([...this.state.todoList]));\n  }\n\n  clearCompleted = () => {\n    this.setState(state => ({\n      todoList: state.todoList.filter(todo => !todo.completed),\n    }));\n  }\n\n  makeCompletedAll = () => {\n    if (this.state.todoList.every(todo => todo.completed)) {\n      this.setState(state => ({\n        todoList: state.todoList.map(todo => (\n          {\n            ...todo,\n            completed: false,\n          }\n        )),\n      }));\n    } else {\n      this.setState(state => ({\n        todoList: state.todoList.map(todo => (\n          {\n            ...todo,\n            completed: true,\n          }\n        )),\n      }));\n    }\n  }\n\n  makeCompleted = (id) => {\n    this.setState(state => ({\n      todoList: state.todoList.map((todo) => {\n        if (todo.id === id) {\n          return {\n            ...todo,\n            completed: !todo.completed,\n          };\n        }\n\n        return todo;\n      }),\n    }));\n  }\n\n  detectUncompletedItems = () => (\n    this.state.todoList.filter(el => !el.completed).length\n  )\n\n  deleteItem = (id) => {\n    this.setState(state => ({\n      todoList: state.todoList.filter(todo => todo.id !== id),\n    }));\n  }\n\n  addTitle = (event) => {\n    this.setState({ title: event.target.value });\n  }\n\n  resetState = () => {\n    this.setState(state => ({\n      title: '',\n      newTodoId: state.newTodoId + 1,\n    }));\n  }\n\n  addNewTodo = (event) => {\n    event.preventDefault();\n    if (this.state.title.length > 0) {\n      this.setState(state => ({\n        todoList: [\n          ...state.todoList,\n          {\n            title: state.title,\n            id: state.newTodoId + 1,\n            completed: state.completed,\n          },\n        ],\n      }));\n    }\n\n    this.resetState();\n  }\n\n  selectActiveView = () => {\n    switch (this.state.selectedView) {\n      case 'Active':\n        return this.state.todoList.filter(el => !el.completed);\n      case 'Completed':\n        return this.state.todoList.filter(el => el.completed);\n      default:\n        return this.state.todoList;\n    }\n  }\n\n  setViewMode = (event) => {\n    switch (event.target.id) {\n      case 'active':\n        this.setState({ selectedView: 'Active' });\n        break;\n      case 'completed':\n        this.setState({ selectedView: 'Completed' });\n        break;\n      default:\n        this.setState({ selectedView: 'All' });\n    }\n  }\n\n  render() {\n    const { todoList, title, selectedView } = this.state;\n\n    return (\n      <section className=\"todoapp\">\n        <header className=\"header\">\n          <h1>todos</h1>\n          <form onSubmit={this.addNewTodo}>\n            <input\n              value={title}\n              onChange={this.addTitle}\n              className=\"new-todo\"\n              placeholder=\"What needs to be done?\"\n            />\n          </form>\n        </header>\n        <section className=\"main\">\n          <input\n            checked={todoList.length > 0 && this.detectUncompletedItems() === 0}\n            type=\"checkbox\"\n            id=\"toggle-all\"\n            className=\"toggle-all\"\n            onChange={this.makeCompletedAll}\n          />\n          <label htmlFor=\"toggle-all\">Mark all as complete</label>\n          <TodoList\n            todos={this.selectActiveView()}\n            completed={this.makeCompleted}\n            deleteItem={this.deleteItem}\n          />\n          {todoList.length > 0 && (\n            <Footer\n              uncompleted={this.detectUncompletedItems}\n              setViewMode={this.setViewMode}\n              selectedView={selectedView}\n              clearCompleted={this.clearCompleted}\n              todoList={this.state.todoList}\n            />\n          )}\n        </section>\n      </section>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './base.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}