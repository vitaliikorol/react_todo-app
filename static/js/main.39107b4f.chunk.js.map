{"version":3,"sources":["TodoItem.js","TodoList.js","App.js","index.js"],"names":["TodoItem","key","this","props","todo","id","className","classNames","completed","type","onChange","checked","htmlFor","title","onClick","deleteItem","React","PureComponent","TodoList","todos","map","todoItem","todoLocalStorage","JSON","parse","localStorage","getItem","App","state","todoList","newTodoId","length","selectedView","clearCompleted","setState","filter","makeCompletedAll","every","makeCompleted","detectUncompletedItems","el","addTitle","event","target","value","resetState","addNewTodo","preventDefault","trim","viewPort","activeView","completedView","allView","setItem","stringify","onSubmit","placeholder","href","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.39107b4f.chunk.js","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\n\nclass TodoItem extends React.PureComponent {\n  render() {\n    return (\n      <li\n        key={this.props.todo.id}\n        className={classNames({ completed: this.props.todo.completed })}\n      >\n        <div className=\"view\">\n          <input\n            type=\"checkbox\"\n            className=\"toggle\"\n            id={this.props.todo.id}\n            onChange={() => this.props.completed(this.props.todo.id)}\n            checked={this.props.todo.completed}\n          />\n          <label\n            htmlFor={this.props.todo.id}\n          >\n            {this.props.todo.title}\n          </label>\n          <button\n            type=\"button\"\n            id={this.props.todo.id}\n            className=\"destroy\"\n            onClick={() => this.props.deleteItem(this.props.todo.id)}\n          />\n        </div>\n        <input type=\"text\" className=\"edit\" />\n      </li>\n    );\n  }\n}\n\nexport default TodoItem;\n\nTodoItem.propTypes = {\n  deleteItem: PropTypes.func.isRequired,\n  completed: PropTypes.func.isRequired,\n  todo: PropTypes.shape({\n    id: PropTypes.number,\n    title: PropTypes.string,\n    completed: PropTypes.bool,\n    edited: PropTypes.bool,\n  }).isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport TodoItem from './TodoItem';\n\nclass TodoList extends React.PureComponent {\n  render() {\n    return (\n      <ul className=\"todo-list\">\n        {this.props.todos.map(todoItem => (\n          <TodoItem\n            todo={todoItem}\n            completed={this.props.completed}\n            deleteItem={this.props.deleteItem}\n          />\n        ))}\n      </ul>\n    );\n  }\n}\n\nexport default TodoList;\n\nTodoList.propTypes = {\n  deleteItem: PropTypes.func.isRequired,\n  completed: PropTypes.func.isRequired,\n  todos: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number,\n    title: PropTypes.string,\n    completed: PropTypes.bool,\n  })).isRequired,\n};\n","import React from 'react';\nimport className from 'classnames';\nimport TodoList from './TodoList';\n\nconst todoLocalStorage = JSON.parse(localStorage.getItem('todoList')) || [];\n\nclass App extends React.PureComponent {\n  state = {\n    todoList: [...todoLocalStorage],\n    newTodoId: todoLocalStorage.length,\n    completed: false,\n    title: '',\n    selectedView: 'All',\n  }\n\n  componentDidUpdate() {\n    localStorage.setItem('todoList', JSON.stringify([...this.state.todoList]));\n  }\n\n  clearCompleted = () => {\n    this.setState(state => ({\n      todoList: state.todoList.filter(todo => todo.completed !== true),\n    }));\n  }\n\n  makeCompletedAll = () => {\n    if (this.state.todoList.every(todo => todo.completed === true)) {\n      this.setState(state => ({\n        todoList: state.todoList.map(todo => (\n          {\n            ...todo,\n            completed: false,\n          }\n        )),\n      }));\n    } else {\n      this.setState(state => ({\n        todoList: state.todoList.map(todo => (\n          {\n            ...todo,\n            completed: true,\n          }\n        )),\n      }));\n    }\n  }\n\n  makeCompleted = (id) => {\n    this.setState(state => ({\n      todoList: state.todoList.map((todo) => {\n        if (todo.id === id) {\n          return {\n            ...todo,\n            completed: !todo.completed,\n          };\n        }\n\n        return todo;\n      }),\n    }));\n  }\n\n  detectUncompletedItems = () => (\n    this.state.todoList.filter(el => el.completed === false).length\n  )\n\n  deleteItem = (id) => {\n    this.setState(state => ({\n      todoList: state.todoList.filter(todo => todo.id !== id),\n    }));\n  }\n\n  addTitle = (event) => {\n    this.setState({ title: event.target.value });\n  }\n\n  resetState = () => {\n    this.setState(state => ({\n      title: '',\n      newTodoId: state.newTodoId + 1,\n    }));\n  }\n\n  addNewTodo = (event) => {\n    event.preventDefault();\n    this.state.title.trim() && this.setState(state => ({\n      todoList: [\n        ...state.todoList,\n        {\n          title: state.title,\n          id: state.newTodoId + 1,\n          completed: state.completed,\n        },\n      ],\n    }));\n    this.resetState();\n  }\n\n  viewPort = () => {\n    switch (this.state.selectedView) {\n      case 'Active':\n        return this.state.todoList.filter(el => el.completed === false);\n      case 'Completed':\n        return this.state.todoList.filter(el => el.completed === true);\n      default:\n        return this.state.todoList;\n    }\n  }\n\n  activeView = () => {\n    this.setState({ selectedView: 'Active' });\n  }\n\n  completedView = () => {\n    this.setState({ selectedView: 'Completed' });\n  }\n\n  allView = () => {\n    this.setState({ selectedView: 'All' });\n  }\n\n  render() {\n    return (\n      <section className=\"todoapp\">\n        <header className=\"header\">\n          <h1>todos</h1>\n          <form onSubmit={this.addNewTodo}>\n            <input\n              value={this.state.title}\n              onChange={this.addTitle}\n              className=\"new-todo\"\n              placeholder=\"What needs to be done?\"\n            />\n          </form>\n        </header>\n        <section className=\"main\">\n          <input\n            type=\"checkbox\"\n            id=\"toggle-all\"\n            className=\"toggle-all\"\n            onChange={this.makeCompletedAll}\n          />\n          <label htmlFor=\"toggle-all\">Mark all as complete</label>\n          <TodoList\n            todos={this.viewPort()}\n            completed={this.makeCompleted}\n            deleteItem={this.deleteItem}\n          />\n          {this.state.todoList.length > 0 && (\n            <footer className=\"footer\">\n              <span className=\"todo-count\">\n                {this.detectUncompletedItems()}\n                {' '}\n                items left\n              </span>\n              <ul className=\"filters\">\n                <li>\n                  <a\n                    href=\"#/\"\n                    onClick={this.allView}\n                    className={className(this.state.selectedView === 'All'\n                      ? 'selected'\n                      : '')}\n                  >\n                    All\n                  </a>\n                </li>\n                <li>\n                  <a\n                    href=\"#/active\"\n                    onClick={this.activeView}\n                    className={className(this.state.selectedView === 'Active'\n                      ? 'selected'\n                      : '')}\n                  >\n                    Active\n                  </a>\n                </li>\n                <li>\n                  <a\n                    href=\"#/completed\"\n                    onClick={this.completedView}\n                    className={this.state.selectedView === 'Completed'\n                      ? 'selected'\n                      : ''}\n                  >\n                    Completed\n                  </a>\n                </li>\n              </ul>\n              <button\n                type=\"button\"\n                className=\"clear-completed\"\n                onClick={this.clearCompleted}\n              >\n                Clear completed\n              </button>\n            </footer>\n          )}\n        </section>\n      </section>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './base.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}